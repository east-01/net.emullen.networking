        /* Game related */
        private KartLevel? level;
        private bool CanAutoSelectLevel { get { return CoreManager.IsMultiplayer && !DevSettings.Settings.ManualLobbyPlayerWaitSwitch; } }
        public bool forceMapPick = false;
        private GameplayManager gameplayManager;

        public GameLobby() {
            string sceneName = UnityEngine.SceneManagement.SceneManager.GetActiveScene().name;
            if(CoreManager.IsLocal && SceneNames.IsMapScene(sceneName)) {
                state = LobbyState.RACING;
                level = CoreManager.LevelAtlas.SearchEnumBySceneName(sceneName);
            }
        }

        switch(State) {
                case LobbyState.WAITING_FOR_PLAYERS:
                    bool timePassed = CanAutoSelectLevel && TimeInState >= PLAYER_WAIT_TIME;
                    bool noAvailableSpace = CanAutoSelectLevel && !DevSettings.Settings.ManualLobbyPlayerWaitSwitch && OpenSlots == 0;
                    if(Input.GetKeyDown(FORCE_MAP_PICK_KEY) || 
                    noAvailableSpace || 
                    timePassed || 
                    CoreManager.IsLocal) {
                        BLog.Log($"Advanced to map selection via ForceMapPick: {Input.GetKeyDown(FORCE_MAP_PICK_KEY)}, noAvailableSpace: {noAvailableSpace}, timePassed: {timePassed}, local: {CoreManager.IsLocal}", LobbyManager.Instance.logSettingsGameLobby);
                        State = LobbyState.MAP_SELECTION;
                    }
                    break;
                case LobbyState.MAP_SELECTION:
                    bool autoSelectValid = CanAutoSelectLevel && TimeInState >= MAP_PICK_TIME;
                    if(level == null && (autoSelectValid || forceMapPick)) {
                        forceMapPick = false;
                        KartLevel? selectedLevel;
                        if(DevSettings.Settings.OverrideMapPick)
                            selectedLevel = DevSettings.Settings.Map;
                        else 
                            selectedLevel = LevelAtlas.PickRandomLevel();

                        SetLevel(selectedLevel.Value);
                    } else if(level != null && MapScene != null/* && gameplayManager != null*/) {
                        MovePlayersToMap();                    
                        State = LobbyState.RACING;
                    }
                    break;
                case LobbyState.RACING:
                    if(gameplayManager == null)
                        return;

                    if(gameplayManager.RaceManager.Phase == RacePhase.FINISHED) {
                        AwardPoints();
                        State = LobbyState.POST_RACE;
                    }
                    break;
                case LobbyState.POST_RACE:
                    if(mapSceneData == null || !NetSceneController.Instance.IsSceneRegistered(mapSceneData)) {
                        MovePlayersToLobby();
                        State = LobbyState.WAITING_FOR_PLAYERS;
                    } else if(NetSceneController.Instance.GetSceneElements(mapSceneData).Clients.Count == 0) {
                        State = LobbyState.WAITING_FOR_PLAYERS;
                    } else if(CoreManager.IsMultiplayer && TimeInState >= ROUND_END_TIME) {
                        MovePlayersToLobby();
                        State = LobbyState.WAITING_FOR_PLAYERS;
                    }
                    break;
            }

        /// <summary>
        /// Moves all players in map scene back to lobby.
        /// </summary>
        public void MovePlayersToLobby() 
        {
            foreach(PlayerData othersData in playerUIDs) {
                NetSceneController.Instance.TargetRpcLoadScene(othersData.connection, new(SceneNames.MENU_LOBBY), false);
            }
        }

        public void MovePlayersToMap() 
        {
            if(mapSceneData == null) {
                Debug.LogError("Can't move players to map, map scene data is null.");
                return;
            }
            if(!NetSceneController.Instance.IsSceneRegistered(mapSceneData)) {
                Debug.LogError("Can't move players to map, the scene isn't registered");
                return;
            }

            BLog.Log($"{MessagePrefix}Sending {playerUIDs.Count} player(s) to map, is server: {InstanceFinder.IsServerStarted} is client: {InstanceFinder.IsClientStarted}", LobbyManager.Instance.logSettingsGameLobby, 0);
            foreach(NetworkConnection client in Connections) {
                NetSceneController.Instance.AddClientToScene(client, mapSceneData);
            }
        }

#region Administrative
        /// <summary>
        /// End the current round. Currently does multiple admin things:
        ///   1. Award points
        ///   2. Recall players to lobby
        /// The map will automatically delete once all players are removed.
        /// </summary>
        public void CompleteRound() 
        {
            AwardPoints();

            MovePlayersToLobby();
        }

        /// <summary>
        /// Gets the placements dictionary from the RaceManager and adds the points awarded to each PlayerData.
        /// </summary>
        public void AwardPoints() 
        {
            if(gameplayManager == null) {
                Debug.LogError("Can't award points, the gameplay manager is null.");
                return;
            }
            if(gameplayManager.RaceManager.Phase != RacePhase.FINISHED) {
                Debug.LogError("Can't award points, the RaceManager's phase isn't FINISHED");
                return;
            }

            SyncDictionary<string, RacePlacementData> placements = gameplayManager.RaceManager.GetPlacements();
            for(int i = 0; i < playerUIDs.Count; i++) {
                PlayerData data = playerUIDs[i];
                if(!placements.ContainsKey(data.uuid)) {
                    Debug.LogWarning($"Tried to award points to \"{data.Summary}\" but they aren't in the placements dictionary.");
                    continue;
                }
                data.points += placements[data.uuid].pointsAwarded;
            }
        }
#endregion

        /// <summary>
        /// Set the level. Will load the corresponding scene on the server.
        /// </summary>
        public void SetLevel(KartLevel level) 
        {   
            if(this.level != null) {
                Debug.LogError("Can't set level, one already exists");
                return;
            }
            BLog.Log($"{MessagePrefix}Picked level {level} and requesting map scene.", LobbyManager.Instance.logSettingsGameLobby, 0);
            this.level = level;

            SceneLookupData newMapLookupData = new(CoreManager.LevelAtlas.RetrieveData(level).sceneName);
            NetSceneController.Instance.LoadSceneAsServer(newMapLookupData);
        }

        private void RegisterGameplayManager(GameplayManager gm) 
        {
            gameplayManager = gm;
            gameplayManager.SetGameLobby(this);
        }

        private void DeregisterGameplayManager() 
        {
            level = null;

            if(gameplayManager == null) {
                Debug.LogError("Can't deregister GameplayManager because it is null.");
                return;
            }
        }

            if(Input.GetKeyDown(FORCE_MAP_PICK_KEY))
                forceMapPick = true;

        if(PlayerCount == 0) {
                NetSceneController.LobbyManager.DeleteLobby(ID);
            }

        private void LobbyStateChanged(LobbyState prev, LobbyState current) 
        {
            if(current == LobbyState.MAP_SELECTION) {
                if(level != null)
                    Debug.LogWarning($"Entering map selection while the level isn't null, still on level \"{level}\"");
            }
        }

        
    // [Serializable]
    // public enum LobbyState 
    // {
    //     WAITING_FOR_PLAYERS, 
    //     MAP_SELECTION, 
    //     RACING, // The lobby is in game
    //     POST_RACE
    // }

    public MenuLobbyController MenuLobbyController { get {
            MenuLobbyController[] lobbyControllers = GameObject.FindObjectsOfType<MenuLobbyController>();
            if(lobbyControllers.Length != 1) {
                Debug.LogError($"Found != 1 MenuLobbyControllers ({lobbyControllers.Length})");
                return null;
            }
            return lobbyControllers[0];
        } }

    LobbyManager.Instance.ClaimScene(Lobby.ID, lookupData);

            if(SceneNames.IsMapScene(lookupData.Name)) {
                mapSceneData = lookupData;

                GameplayManager gameplayManager = elements.GameplayManager;
                if(gameplayManager != null) {
                    RegisterGameplayManager(gameplayManager);
                } else {
                    Debug.LogError("Can't register gameplay manager, it's null.");
                    return;
                }
            } else 
                return;

    elements.DeleteOnLastClientRemove = SceneNames.IsMapScene(lookupData.Name);

        if(lookupData == mapSceneData) {
        DeregisterGameplayManager();
    }

    BLog.Highlight("Recieved message: " + message);
    if(type == LobbyMessageType.ACTION) {
        switch(message) {
            case LME_CMD_REQUEST_FORCE_MAP_PICK:
                if(!IsServerInitialized)
                    return;

                // if(!DevSettings.IsDevelopment()) {
                //     Debug.LogWarning("Can't force map pick. We're not in a development build.");
                //     return;
                // }
                GameLobby lobby = GetLobby(sender);
                if(lobby == null) {
                    Debug.LogError("Can't force map pick, client is not in a lobby.");
                    return;
                }

                lobby.State = LobbyState.MAP_SELECTION;
                lobby.forceMapPick = true;
                break;
            case LME_CMD_REQUEST_LOBBY_MOVE:
                if(!IsServerInitialized)
                    return;

                if(sender == null) {
                    Debug.LogError("Can't handle request lobby move, sender is null.");
                    return;
                }

                lobby = GetLobby(sender);
                if(lobby == null) {
                    Debug.LogError("Can't move client to lobby, they are not in one.");
                    return;
                }
                BLog.Log($"Client \"{sender}\" requested to move to lobby", logSettings, 0);
                if(IsHostStarted)
                    SceneController.Instance.LoadScene(new(lobbySceneName), false);
                else
                    NetSceneController.Instance.TargetRpcLoadScene(sender, new(lobbySceneName), false);

                break;
        }
    }

        public static readonly float PLAYER_WAIT_TIME = 20;
        public static readonly float ROUND_END_TIME = 15;
        public static readonly float MAP_PICK_TIME = 3;
        public static readonly KeyCode FORCE_MAP_PICK_KEY = KeyCode.F4;
